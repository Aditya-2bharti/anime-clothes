import Head from 'next/head'
import Link from 'next/link'
import Product  from '../models/Product';
import mongoose from "mongoose";

 
 

export default function Home({products}) {
  return (
    <div>
      <Head>
        <title>AnimeClothes.com - Be the Anime</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/zoro.jpg" />
      </Head>
     
    
     <div className=''>
       <img src="/Atsuko.jpg" className='pt-1 max-w-screen-1xl ' alt=''  />
     </div>
     <section className="text-gray-600 body-font">
  <div className="container px-5 py-24 mx-auto">
    <div className="flex flex-wrap w-full mb-20 flex-col items-center text-center">
      <h1 className="sm:text-3xl text-2xl font-medium title-font mb-2 text-gray-900">Wear the  Whatever you want with AnimeClothes.com</h1>
      <p className="lg:w-1/2 w-full leading-relaxed text-gray-500">Wear Whatever you want? you want to wear this ? so try it Now AnimeClothes.com</p>
    </div>
    <div className="flex flex-wrap -m-4"> 
    {Object.keys(products).map((item)=>{return <Link passHref={true} key={item._id} href={`/product/${products[item].slug}`}><div className="lg:w-1/5 md:w-1/2 p-4 w-full cursor-pointer shadow-xl m-5">
        <a className="block relative  rounded overflow-hidden">
          <img alt="ecommerce" className="m-auto md:m-0   block " src={products[item].img}/>
        </a>
        <div className="mt-4 text-center md:text-left">
          <h3 className="text-gray-500 text-xs tracking-widest title-font mb-1">Hoodies</h3>
          <h2 className="text-gray-900 title-font text-lg font-medium">{products[item].title}</h2>
          <p className="mt-1">₹{products[item].price}</p>
          <div className="mt-1">
           {products[item].size.includes('S') && <span className='border border-gray-300 mx-1 px-1'>S</span>   }
           {products[item].size.includes('M') && <span className='border border-gray-300 mx-1 px-1'>M</span>  }
           {products[item].size.includes('L') && <span className='border border-gray-300 mx-1 px-1'>L</span>  }
           {products[item].size.includes('XL') && <span className='border border-gray-300 mx-1 px-1'>XL</span>   }
           {products[item].size.includes('XXL') && <span className='border border-gray-300 mx-1 px-1'>XXL</span>   }
          </div>
          <div className="mt-1">
          {products[item].color.includes('red') && <button className="border-2 border-gray-300 ml-1 bg-red-700 rounded-full w-6 h-6 focus:outline-none"></button>}
          {products[item].color.includes('blue') && <button className="border-2 border-gray-300 ml-1 bg-blue-700 rounded-full w-6 h-6 focus:outline-none"></button>}
          {products[item].color.includes('black') && <button className="border-2 border-gray-300 ml-1 bg-black rounded-full w-6 h-6 focus:outline-none"></button>}
          {products[item].color.includes('yellow') && <button className="border-2 border-gray-300 ml-1 bg-yellow-400 rounded-full w-6 h-6 focus:outline-none"></button>}
          {products[item].color.includes('white') && <button className="border-2 border-gray-300 ml-1 bg-white rounded-full w-6 h-6 focus:outline-none"></button>}
            
          </div>
        </div>
      </div> 
        </Link>})}

        
     
     
       
    </div>
    <div className="flex flex-wrap -m-4"> 
    {Object.keys(products).map((item)=>{return <Link passHref={true} key={item._id} href={`/product/${products[item].slug}`}><div className="lg:w-1/5 md:w-1/2 p-4 w-full cursor-pointer shadow-xl m-5">
        <a className="block relative  rounded overflow-hidden">
          <img alt="ecommerce" className="m-auto md:m-0   block " src={products[item].img}/>
        </a>
        <div className="mt-4 text-center md:text-left">
          <h3 className="text-gray-500 text-xs tracking-widest title-font mb-1">Hoodies</h3>
          <h2 className="text-gray-900 title-font text-lg font-medium">{products[item].title}</h2>
          <p className="mt-1">₹{products[item].price}</p>
          <div className="mt-1">
           {products[item].size.includes('S') && <span className='border border-gray-300 mx-1 px-1'>S</span>   }
           {products[item].size.includes('M') && <span className='border border-gray-300 mx-1 px-1'>M</span>  }
           {products[item].size.includes('L') && <span className='border border-gray-300 mx-1 px-1'>L</span>  }
           {products[item].size.includes('XL') && <span className='border border-gray-300 mx-1 px-1'>XL</span>   }
           {products[item].size.includes('XXL') && <span className='border border-gray-300 mx-1 px-1'>XXL</span>   }
          </div>
          <div className="mt-1">
          {products[item].color.includes('red') && <button className="border-2 border-gray-300 ml-1 bg-red-700 rounded-full w-6 h-6 focus:outline-none"></button>}
          {products[item].color.includes('blue') && <button className="border-2 border-gray-300 ml-1 bg-blue-700 rounded-full w-6 h-6 focus:outline-none"></button>}
          {products[item].color.includes('black') && <button className="border-2 border-gray-300 ml-1 bg-black rounded-full w-6 h-6 focus:outline-none"></button>}
          {products[item].color.includes('yellow') && <button className="border-2 border-gray-300 ml-1 bg-yellow-400 rounded-full w-6 h-6 focus:outline-none"></button>}
          {products[item].color.includes('white') && <button className="border-2 border-gray-300 ml-1 bg-white rounded-full w-6 h-6 focus:outline-none"></button>}
            
          </div>
        </div>
      </div> 
        </Link>})}

        
     
     
       
    </div>
     
  </div>
</section>
      
    </div>
  )
}



export async function getServerSideProps(context) {
  if(!mongoose.connections[0].readyState){
    await mongoose.connect(process.env.MONGO_URI)
     
  }
  let products = await Product.find({category:  'hoodies'})
  let hoods =  {}
  for(let item of products){
    if(item.title in hoods){
       if(!hoods[item.title].color.includes(item.color) && item.availableQty > 0){
        hoods[item.title].color.push(item.color)
       }
       if(!hoods[item.title].size.includes(item.size) && item.availableQty > 0){
        hoods[item.title].size.push(item.size)
       }
    }
    else{
      hoods[item.title] = JSON.parse(JSON.stringify(item))
      if(item.availableQty > 0){
        hoods[item.title].color = [item.color]
        hoods[item.title].size = [item.size]
      }
    }
  }
return { 
    props: {products: JSON.parse(JSON.stringify(hoods))}, // will be passed to the page component as props
  }
}





 
 
  